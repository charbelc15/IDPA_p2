
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import BOTH, YES, Image, Tk, Canvas, Entry, Text, Button, PhotoImage, ttk
from tkinter.tix import IMAGETEXT
from Project2_parts.gui_functions.Start_btn import Start_btn



















#Projet 2 inputs
from Project2_parts.gui_functions.get_Full_Indexing_Cosine import get_Full_Indexing_Cosine
from Project2_parts.gui_functions.get_Full_Indexing_PCC import get_Full_Indexing_PCC
from Project2_parts.gui_functions.get_Full_NoIndexing_Cosine import get_Full_NoIndexing_Cosine
from Project2_parts.gui_functions.get_Full_NoIndexing_PCC import get_Full_NoIndexing_PCC
from Project2_parts.gui_functions.get_IDF_Indexing_Cosine import get_IDF_Indexing_Cosine
from Project2_parts.gui_functions.get_IDF_Indexing_PCC import get_IDF_Indexing_PCC
from Project2_parts.gui_functions.get_IDF_NoIndexing_Cosine import get_IDF_NoIndexing_Cosine
from Project2_parts.gui_functions.get_IDF_NoIndexing_PCC import get_IDF_NoIndexing_PCC
from Project2_parts.gui_functions.get_TED import getTED
import os
from Project2_parts.gui_functions.get_TF_Indexing_Cosine import get_TF_Indexing_Cosine
from Project2_parts.gui_functions.get_TF_Indexing_PCC import get_TF_Indexing_PCC
from Project2_parts.gui_functions.get_TF_NoIndexing_Cosine import get_TF_NoIndexing_Cosine

from Project2_parts.gui_functions.get_TF_NoIndexing_PCC import get_TF_NoIndexing_PCC
from Project2_parts.Part1_CompareVectors.vector.Filter_Text import Filter_Text


#TED
#ADD r before string for it to work!!

#Lea here we want the FilePath from browse button
FilePath = r"C:\Users\Charbel\Desktop\LAU\LAU Fourth Year\Spring2022\IDPA\Project2\CodeProject2\ET\xml_files\Project2_N_test1.xml"
getTED(FilePath)

#QUERY 
strings=[
    'xml_files/Project2_test1.xml' # 1
    ,'xml_files/Project2_test2.xml' # 2
   ,'xml_files/Project2_test3.xml' # 3
   ,'xml_files/Project2_test4.xml' # 4
   ,'xml_files/Project2_test5.xml' # 5
   ,'xml_files/Project2_test6.xml' # 6
   ,'xml_files/Project2_test7.xml' # 7
   ,'xml_files/Project2_test8.xml' # 8
   ,'xml_files/Project2_test9.xml' # 9
   ,'xml_files/Project2_test10.xml'  # 10
]


#Lea here we want the Query from Write your Query text box
Query = 'tannir ece chocolat?   I @'




text_to_search_for=Query
    #remove special characters, I, a
filtered_text_to_search_for = Filter_Text(text_to_search_for)
    #remove leading / trailing whitespaces
Query = filtered_text_to_search_for.strip()























OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path("./assets")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


window = Tk()

window.geometry("1196x794")
window.configure(bg = "#FFFFFF")


canvas = Canvas(
    window,
    bg = "#FFFFFF",
    height = 794,
    width = 1196,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
canvas.create_rectangle(
    0.0,
    0.0,
    1196.0,
    794.0,
    fill="#33ccff",
    outline="")

canvas.create_rectangle(
    193.0,
    79.0,
    1004.0,
    714.0,
    fill="#0082C8",
    outline="")

# def resize_image(event):
#     new_width = event.width
#     new_height = event.height
#     image = copy_of_image.resize((new_width, new_height))
#     photo = IMAGETEXT.PhotoImage(image)
#     label.config(image = photo)
#     label.image = photo #avoid garbage collection


# from tkinter import *
# from tkinter import ttk
# from PIL import Image, ImageTk

# image = Image.open('image_1.png')
# copy_of_image = image.copy()
# photo = ImageTk.PhotoImage(image)
# label = ttk.Label(window, image = photo)
# label.bind('<Configure>', resize_image)
# label.pack(fill=BOTH, expand = YES)

# window.mainloop()

# entry_image_1 = PhotoImage(
#     file=relative_to_assets("image_1.png"))
# entry_bg_1 = canvas.create_image(
#     810.0,
#     267.5,
#     image=entry_image_1
# )
entry_1 = Entry(
    bd=0,
    bg="#FFFFFF",
    highlightthickness=0
)
entry_1.place(
    x=657.0,
    y=212.0,
    width=238.0,
    height=29.0
)

button_image_1 = PhotoImage(
    file=relative_to_assets("button_1.png"))
button_1 = Button(
    image=button_image_1,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("button_1 clicked"),
    relief="flat"
)
button_1.place(
    x=657.0,
    y=141.0,
    width=245.0,
    height=39.0
)

entry_image_2 = PhotoImage(
    file=relative_to_assets("entry_2.png"))
entry_bg_2 = canvas.create_image(
    801.0,
    638.5,
    image=entry_image_2
)
entry_2 = Entry(
    bd=0,
    bg="#FFFFFF",
    highlightthickness=0
)
entry_2.place(
    x=682.0,
    y=623.0,
    width=238.0,
    height=29.0
)

entry_image_3 = PhotoImage(
    file=relative_to_assets("entry_3.png"))
entry_bg_3 = canvas.create_image(
    357.0,
    236.5,
    image=entry_image_3
)
entry_3 = Entry(
    bd=0,
    bg="#FFFFFF",
    highlightthickness=0
)
entry_3.place(
    x=238.0,
    y=221.0,
    width=238.0,
    height=29.0
)

button_image_2 = PhotoImage(
    file=relative_to_assets("button_2.png"))
button_2 = Button(
    image=button_image_2,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("button_2 clicked"),
    relief="flat"
)
button_2.place(
    x=239.0,
    y=363.0,
    width=167.0,
    height=33.0
)

button_image_3 = PhotoImage(
    file=relative_to_assets("button_3.png"))
button_3 = Button(
    image=button_image_3,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("button_3 clicked"),
    relief="flat"
)
button_3.place(
    x=238.0,
    y=146.0,
    width=127.0,
    height=33.0
)

button_image_4 = PhotoImage(
    file=relative_to_assets("button_4.png"))
button_4 = Button(
    image=button_image_4,
    borderwidth=0,
    highlightthickness=0,

    command=lambda: Start_btn(strings, Query, Combo1, Combo2, Combo3),
    relief="flat"
)
button_4.place(
    x=682.0,
    y=525.0,
    width=200.0,
    height=50.0
)

entry_image_4 = PhotoImage(
    file=relative_to_assets("entry_4.png"))
entry_bg_4 = canvas.create_image(
    357.0,
    463.5,
    image=entry_image_4
)
entry_4 = Entry(
    bd=0,
    bg="#FFFFFF",
    highlightthickness=0
)
entry_4.place(
    x=238.0,
    y=448.0,
    width=238.0,
    height=29.0
)
vlist = ["TF", "IDF", "FULL"]
 
Combo1 = ttk.Combobox(window, values = vlist, state="readonly")
Combo1.set("Pick an Option")
Combo1.place(
    x=715.0,
    y=264.0,
    width=99.0,
    height=18.0
)


vlist = ["Non Indexing", "With Indexing"]
 
Combo2 = ttk.Combobox(window, values = vlist, state="readonly")
Combo2.set("Pick an Option")
Combo2.place(
    x=715.0,
    y=354.0,
    width=99.0,
    height=18.0
)

vlist = ["PCC Measure", "Cosine measure"]

Combo3 = ttk.Combobox(window, values = vlist, state="readonly")
Combo3.set("Pick an Option")
Combo3.place(
    x=715.0,
    y=444.0,
    width=99.0,
    height=18.0
)

Combo1.config(font='Aerial 7',justify='center'  )
Combo2.config(font='Aerial 7',justify='center'  )
Combo3.config(font='Aerial 7',justify='center'  )

window.resizable(False, False)
window.mainloop()
