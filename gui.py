
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer
import xml.etree.ElementTree as ET

from numpy import full
from Project1_parts.Part2.Nierman_Jagadish import TED
from Project1_parts.Part1.displayTree import displayTree
from Project1_parts.Part2_Chawathe.Chawathe import Chawathe
from Project1_parts.Part2_Chawathe.getNodesHeights import getNodesHeights
from Project2_parts.Part1_CompareVectors.term_weighting.IDF import IDF
from Project2_parts.Part1_CompareVectors.term_weighting.TF import TF
from Project2_parts.Part1_CompareVectors.term_weighting.countsArray import countsArray

from Project2_parts.Part1_CompareVectors.term_weighting.weight import weight
from Project2_parts.Part1_CompareVectors.term_weighting.weight_TF import weight_TF
from Project2_parts.Part1_CompareVectors.term_weighting.weight_IDF import weight_IDF
from Project2_parts.Part1_CompareVectors.vector.Filter_Text import Filter_Text
from Project2_parts.Part1_CompareVectors.vector.acceptable_text import acceptable_text
from Project2_parts.Part1_CompareVectors.vector.augmented_vector_Full import augmented_vector_Full
from Project2_parts.Part1_CompareVectors.vector.augmented_vector_IDF import augmented_vector_IDF
from Project2_parts.Part1_CompareVectors.vector.augmented_vector_TF import augmented_vector_TF
from Project2_parts.Part1_CompareVectors.vector.getDocFullText import getDocFullText
from Project2_parts.Part1_CompareVectors.vector.getPathFactor import getPathFactor
from Project2_parts.Part1_CompareVectors.vector.vector_Full import vector_Full
from Project2_parts.Part1_CompareVectors.vector.vector_IDF import vector_IDF
from Project2_parts.Part1_CompareVectors.vector.vector_TF import vector_TF
from Project2_parts.Part1_CompareVectors.vector_average.Cosine import Cosine
from Project2_parts.Part1_CompareVectors.vector_average.PCC import PCC
from Project2_parts.Part1_CompareVectors.vector_tools.vector_to_dict import vector_to_dict
from cProfile import label
from tkinter import *
from tkinter import ttk
from pathlib import Path, WindowsPath
from tkinter import ttk, filedialog
from tkinter.filedialog import askopenfile
from ctypes.wintypes import SIZE
import tkinter
from tkinter.filedialog import *
from tkinter import *
from tkinter import *
from tkinter import ttk
import tkinter.filedialog as fd
from turtle import color 
from tkinter import filedialog
from tkinter import ttk
from tkinter import scrolledtext

from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage, ttk

from numpy import choose, greater_equal


OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path("./assets")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


window = Tk()

window.geometry("1196x794")
window.configure(bg = "#FFFFFF")


canvas = Canvas(
    window,
    bg = "#FFFFFF",
    height = 794,
    width = 1196,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    895.0,
    512.0,
    image=image_image_1
)

canvas.create_rectangle(
    193.0,
    79.0,
    1004.0,
    714.0,
    fill="#C4EDFF",
    outline="")

button_image_1 = PhotoImage(
    file=relative_to_assets("button_1.png"))
button_1 = Button(
    image=button_image_1,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("button_1 clicked"+getTED()),
    relief="flat"
)
button_1.place(
    x=457.0,
    y=271.0,
    width=167.0,
    height=43.0
)
# def open_file():
#     file = askopenfilenames(filetypes = [('XML files', '*.xml'),('All files','*')])
#     lst = list(file)
#     print(lst)
#     for openfilename in file:
#       if openfilename:
#         content = openfilename.read()
#         openfilename.close()
#         print("%d characters in this file" % len(content))
#define label
# label = tkinter.Label(FrameInfo, text="Choose your XML files", font=("Arial",18), bg="brown", fg="white" )
# label.grid(row=0, column=1, padx=365, pady=15)
# button frame 
#define layout
chooseA_bt = tkinter.Button(window, text="Choose File A", bg="grey", activebackground="#00ffff", borderwidth=5, command= lambda: choose_file(1))
chooseA_bt.grid(row=0,column=0, pady=10)
locA = Entry(window, width=40, borderwidth=5)
locA.grid(row=1, column=0, padx=50)

chooseB_bt = tkinter.Button(window, text="Choose File B", bg="grey", activebackground="#00ffff", borderwidth=5, command= lambda: choose_file(2))
chooseB_bt.grid(row=0,column=1)
locB = Entry(window, width=40, borderwidth=5)
locB.grid(row=1, column=1, padx=50)

chooseC_bt = tkinter.Button(window, text="Choose Multiple Files", bg="grey", activebackground="#00ffff", borderwidth=5, command= lambda: choose_file(3))
chooseC_bt.grid(row=0,column=2, pady=10)
locC = Entry(window, width=40, borderwidth=5)
locC.grid(row=1, column=2, padx=50)

chooseD_bt = tkinter.Button(window, text="Choose query", bg="grey", activebackground="#00ffff", borderwidth=5, command= lambda: choose_file(4))
chooseD_bt.grid(row=0,column=3, pady=10)
locD = Entry(window, width=40, borderwidth=5)
locD.grid(row=1, column=3, padx=50)

dis_text = Entry(window, width=50, borderwidth=5)
dis_text.grid(row=6, column=1, padx=20)

#method choosing file
fileA = ""
fileB = ""
fileC= ""
fileD= ""

# e.pack()
locD.insert(0,"enter query")
      
def choose_file(arg) :
    
    if arg == 1 :
        locA.delete(0, "end")
        fileA = askopenfilename(filetypes = [('xml_files', '*.xml'),('All files','*')])
        locA.insert(0,fileA)
        #print("You have selected : %s" % fileA)
        #filepathA = filedialog.asksaveasfilename()
    if arg == 2 :
        locB.delete(0, "end")
        fileB = askopenfilename(filetypes = [('xml_files', '*.xml'),('All files','*')])
        locB.insert(0,fileB)
    if arg==3 :
        # locC.delete(0,"end")
        # fileC = askopenfilenames(filetypes = [('xml_files', '*.xml'),('All files','*')])
        # filez= window.splitlist(filez)
        # locC.insert(0,fileC)
        # for file in fileC: 
        #  f=open(file,"r")
        #  data=f.read()
        #  f.close()
        filez = filedialog.askopenfilenames(window,title='Choose a file')
        #split the selected files into a list
        filez= window.tk.splitlist(filez)
        #get the data from all the files 
        for eachfile in filez:
         f=open(eachfile,"r")
         data=f.read()
         f.close()  
         list_of_contents = []
         for words in data:
          list_of_contents.append('documents data:' + words)
        return list_of_contents
        


    if arg==4 :
     string=locD.get()
     return string

    #  global entry
    # string= entry.get()
    # label.configure(text=string)

    # #Initialize a Label to display the User Input
    # label=Label(window, text="", font=("Courier 22 bold"))
    # # label.pack()

    # #Create an Entry widget to accept User Input
    # entry= Entry(window, width= 40)
    # entry.focus_set()
    # # entry.pack()

    #Create a Button to validate Entry Widget
    # ttk.Button(window, text= "Okay",width= 20, command )

    window.mainloop()
        #print("You have selected : %s" % fileB)
        #filepathB = filedialog.asksaveasfilename()

# Create a Button
# ttk.Button(window, text="Browse", command=open_file).pack(pady=20)

# window.mainloop()
def getTED() :
    
    dis_text.delete(0, "end")
    xmlFile1 = locA.get()
    xmlFile2 = locB.get()
    
#     val = TED(tree1, tree2)
# print()
# print("distance ", val )
# Similarity = 1/(val+1)
# print()
# print("Similarity according to Nierman",Similarity)
    treeA = ET.parse(xmlFile1)  # xml to tree
    treeB = ET.parse(xmlFile2)  # xml to tree
    NJ1 = TED(treeA, treeB)
    dis_text.insert(0,'Distance between A and B: ' +str(NJ1) + ''  )

    # print( NJ1)


button_image_2 = PhotoImage(
    file=relative_to_assets("button_2.png"))
button_2 = Button(
    image=button_image_2,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("button_3 clicked"),
    relief="flat"
)
button_2.place(
    x=239.0,
    y=271.0,
    width=167.0,
    height=43.0
)

button_image_3 = PhotoImage(
    file=relative_to_assets("button_3.png"))
button_3 = Button(
    image=button_image_3,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("button_3 clicked"),
    relief="flat"
)
button_3.place(
    x=451.0,
    y=525.0,
    width=266.0,
    height=109.0
)

entry_image_1 = PhotoImage(
    file=relative_to_assets("entry_1.png"))
entry_bg_1 = canvas.create_image(
    836.0,
    298.5,
    image=entry_image_1
)
entry_1 = Entry(
    bd=0,
    bg="#FFFFFF",
    highlightthickness=0
)
entry_1.place(
    x=717.0,
    y=283.0,
    width=238.0,
    height=29.0
)
# def display_text():
#    global entry
#    string= entry.get()
#    label.configure(text=string)

# #Initialize a Label to display the User Input
# # label=Label(window, text="", font=("Courier 22 bold"))
# # label.pack()

# #Create an Entry widget to accept User Input
# entry= Entry(window, width= 40)
# entry.focus_set()
# # entry.pack()

# #Create a Button to validate Entry Widget
# ttk.Button(window, text= "Okay",width= 20, command= display_text)

# window.mainloop()
# # Import the required Libraries

string1=choose_file(1)
string2=choose_file(2)
tree1 = ET.parse(string1) #this gets the file into a tree structure
tree2 = ET.parse(string2)

tree_root1 = tree1.getroot() #this gives us the root element of the file
tree_root2 = tree2.getroot() #this gives us the root element of the file
flagcounter3 = 0
for i in tree_root1.iter(): 
 flagcounter3+=1

ElementProperties=[]
flag3 = [False]*flagcounter3
getPathFactor(tree_root1,flag3,0,False,ElementProperties) 
print()
print("Element Properties : ", ElementProperties)
FullText=""
text=[]

for text_val in text:
#FullText+= text_val.split('\n')[0] + " "
    FullText+= text_val + " "
    Filtered_Text = Filter_Text(FullText)

documents=choose_file(3)
_vector_TF_1 = vector_TF(documents)[1]
_vector_IDF_1 = vector_IDF(documents)[1]
_vector_TF_2 = vector_TF(documents)[1]
_vector_IDF_2 = vector_IDF(documents)[1]
aug_vector_Full_1 = augmented_vector_Full(documents,ElementProperties,0,Filtered_Text,_vector_TF_1,_vector_IDF_1)
aug_vector_Full_2= augmented_vector_Full(documents,ElementProperties,0,Filtered_Text,_vector_TF_2,_vector_IDF_2)

Full_dict2 = vector_to_dict(aug_vector_Full_2)
Full_dict1 = vector_to_dict(aug_vector_Full_1)


   
def TF():
    doc=0
    #get the query
    word = choose_file(4)
    #get the list -data from all the documents 
    documents=choose_file(3)
    TF1=TF(word, countsArray(documents)[0], countsArray(documents)[1],doc)
    dis_text.insert(0,'Distance between vectorA and vectorB: ' +str(TF1) + ''  )


def IDF():
    doc=0
    word = choose_file(4)
    documents=choose_file(3)
    IDF1=IDF(word, countsArray(documents)[0], countsArray(documents)[1],doc)
    dis_text.insert(0,'Distance between vectorA and vectorB: ' +str(IDF1) + ''  )


def Full():
    doc=0
    word = choose_file(4)
    documents=choose_file(3)
    Full1=weight(word, countsArray(documents)[0], doc,countsArray(documents)[1])
    dis_text.insert(0,'Distance between vectorA and vectorB: ' +str(Full1) + ''  )

    # print("Full weight: " , weight(word,doc,documents))
def CosineMeasure():


    dis_text.insert(0,' Similarity via cosine: ', Cosine( Full_dict1 , Full_dict2)  + '')

def PCCMeasure():

    dis_text.insert(0,' Similarity via PCC: ', PCC( Full_dict1 , Full_dict2) + '')


vlist = ["IDF", "TF", "FULL"]
 
Combo = ttk.Combobox(window, values = vlist, state="readonly")
Combo.set("Pick an Option")
Combo.place(
    x=515.0,
    y=154.0,
    width=99.0,
    height=18.0
)

vlist = ["Cosine Measure", "PCC measure"]
 
Combo = ttk.Combobox(window, values = vlist, state="readonly")
Combo.set("Pick an Option")
Combo.place(
    x=615.0,
    y=154.0,
    width=99.0,
    height=18.0
)
vlist = ["Indexing", "Non indexing"]
 
Combo = ttk.Combobox(window, values = vlist, state="readonly")
Combo.set("Pick an Option")
Combo.place(
    x=415.0,
    y=154.0,
    width=99.0,
    height=18.0
)

Combo.config(font='Aerial 7',justify='center'  )
Combo.config(font='Aerial 7',justify='center'  )
Combo.config(font='Aerial 7',justify='center'  )
window.resizable(False, False)
window.mainloop()
